"""Adds repositories/archives"""

########################################################################
# DO NOT EDIT THIS FILE unless you are inside the
# https://github.com/3rdparty/eventuals repository. If you
# encounter it anywhere else it is because it has been copied there in
# order to simplify adding transitive dependencies. If you want a
# different version of eventuals follow the Bazel build
# instructions at https://github.com/3rdparty/eventuals.
########################################################################

load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//3rdparty/bazel-rules-asio:repos.bzl", asio_repos = "repos")
load("//3rdparty/bazel-rules-curl:repos.bzl", curl_repos = "repos")
load("//3rdparty/bazel-rules-jemalloc:repos.bzl", jemalloc_repos = "repos")
load("//3rdparty/bazel-rules-libuv:repos.bzl", libuv_repos = "repos")
load("//3rdparty/pyprotoc-plugin:repos.bzl", pyprotoc_plugin_repos = "repos")
load("//3rdparty/stout-borrowed-ptr:repos.bzl", stout_borrowed_ptr_repos = "repos")
load("//3rdparty/stout-notification:repos.bzl", stout_notification_repos = "repos")

def repos(external = True, repo_mapping = {}):
    """Adds repositories/archives needed by eventuals

    Args:
          external: whether or not we're invoking this function as though
            though we're an external dependency
          repo_mapping: passed through to all other functions that expect/use
            repo_mapping, e.g., 'git_repository'
    """

    asio_repos(
        repo_mapping = repo_mapping,
    )

    curl_repos(
        repo_mapping = repo_mapping,
    )

    jemalloc_repos(
        repo_mapping = repo_mapping,
    )

    libuv_repos(
        repo_mapping = repo_mapping,
    )

    stout_borrowed_ptr_repos(
        repo_mapping = repo_mapping,
    )

    stout_notification_repos(
        repo_mapping = repo_mapping,
    )

    pyprotoc_plugin_repos(
        repo_mapping = repo_mapping,
    )

    if "com_github_grpc_grpc" not in native.existing_rules():
        http_archive(
            name = "com_github_grpc_grpc",
            urls = ["https://github.com/grpc/grpc/archive/refs/tags/v1.45.0.tar.gz"],
            strip_prefix = "grpc-1.45.0",
            sha256 = "ec19657a677d49af59aa806ec299c070c882986c9fcc022b1c22c2a3caf01bcd",
        )

    if "bazel_skylib" not in native.existing_rules():
        http_archive(
            name = "bazel_skylib",
            urls = [
                "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz",
                "https://github.com/bazelbuild/bazel-skylib/releases/download/1.2.1/bazel-skylib-1.2.1.tar.gz",
            ],
            sha256 = "f7be3474d42aae265405a592bb7da8e171919d74c16f082a5457840f06054728",
        )

    if external:
        maybe(
            git_repository,
            name = "com_github_3rdparty_eventuals",
            remote = "https://github.com/3rdparty/eventuals",
            commit = "303bb6a5fe3544f3f5a05b4733d3efc84de3c601",
            shallow_since = "1636402389 -0800",
            repo_mapping = repo_mapping,
        )

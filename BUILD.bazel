load("@rules_cc//cc:defs.bzl", "cc_library")
load("//bazel:copts.bzl", "copts")

cc_library(
    name = "base",
    srcs = [
        "eventuals/scheduler.cc",
        "eventuals/static-thread-pool.cc",
    ],
    hdrs = [
        "eventuals/builder.h",
        "eventuals/callback.h",
        "eventuals/catch.h",
        "eventuals/closure.h",
        "eventuals/collect.h",
        "eventuals/compose.h",
        "eventuals/concurrent.h",
        "eventuals/concurrent-ordered.h",
        "eventuals/conditional.h",
        "eventuals/do-all.h",
        "eventuals/eventual.h",
        "eventuals/expected.h",
        "eventuals/filter.h",
        "eventuals/finally.h",
        "eventuals/flat-map.h",
        "eventuals/foreach.h",
        "eventuals/generator.h",
        "eventuals/head.h",
        "eventuals/if.h",
        "eventuals/interrupt.h",
        "eventuals/iterate.h",
        "eventuals/just.h",
        "eventuals/lazy.h",
        "eventuals/let.h",
        "eventuals/lock.h",
        "eventuals/loop.h",
        "eventuals/map.h",
        "eventuals/os.h",
        "eventuals/pipe.h",
        "eventuals/raise.h",
        "eventuals/range.h",
        "eventuals/reduce.h",
        "eventuals/repeat.h",
        "eventuals/scheduler.h",
        "eventuals/semaphore.h",
        "eventuals/sequence.h",
        "eventuals/static-thread-pool.h",
        "eventuals/stream.h",
        "eventuals/take.h",
        "eventuals/task.h",
        "eventuals/terminal.h",
        "eventuals/then.h",
        "eventuals/transformer.h",
        "eventuals/type-check.h",
        "eventuals/type-traits.h",
        "eventuals/undefined.h",
        "eventuals/unpack.h",
        "eventuals/until.h",
    ],
    copts = copts(),
    deps = [
        "@com_github_google_glog//:glog",
    ] + select({
        # NOTE!
        # For now we build jemalloc on macOS and Linux.
        # The way how to build jemalloc on Windows is more
        # complicated. In future we are going to make this
        # lib build on Windows too.
        # https://github.com/3rdparty/bazel-rules-jemalloc/tree/ArthurBandaryk.jemalloc-windows
        "@bazel_tools//src/conditions:windows": [],
        "//conditions:default": [
            "@com_github_jemalloc_jemalloc//:jemalloc",
        ],
    }),
)

cc_library(
    name = "events",
    srcs = [
        "eventuals/event-loop.cc",
    ],
    hdrs = [
        "eventuals/dns-resolver.h",
        "eventuals/event-loop.h",
        "eventuals/filesystem.h",
        "eventuals/signal.h",
        "eventuals/timer.h",
    ],
    copts = copts(),
    deps = [
        ":base",
        "@com_github_chriskohlhoff_asio//:asio",
        "@com_github_libuv_libuv//:libuv",
    ],
)

cc_library(
    name = "http",
    srcs = [
        "eventuals/http.cc",
    ],
    hdrs = [
        "eventuals/http.h",
        "eventuals/rsa.h",
        "eventuals/x509.h",
    ],
    copts = copts(),
    defines = [
        # Windows build fails without this define.
        "GLOG_NO_ABBREVIATED_SEVERITIES",
    ],
    # Gives the error "undefined symbol: curl_global_init" if False.
    # Default is False.
    linkstatic = True,
    deps = [
        ":base",
        ":events",
        "@com_github_curl_curl//:libcurl_boringssl",
    ],
)

cc_library(
    name = "eventuals",
    copts = copts(),
    visibility = ["//visibility:public"],
    deps = [
        ":base",
        ":events",
        ":http",
    ],
)

cc_library(
    name = "grpc",
    srcs = [
        "eventuals/grpc/server.cc",
    ],
    hdrs = [
        "eventuals/grpc/call-type.h",
        "eventuals/grpc/client.h",
        "eventuals/grpc/completion-pool.h",
        "eventuals/grpc/logging.h",
        "eventuals/grpc/server.h",
        "eventuals/grpc/traits.h",
    ],
    copts = copts(),
    # TODO(benh): resolve build issues on Windows and then remove
    # these 'target_compatible_with' constraints.
    target_compatible_with = select({
        "@platforms//os:linux": [],
        "@platforms//os:macos": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    visibility = ["//visibility:public"],
    deps = [
        "@com_github_3rdparty_eventuals//:eventuals",
        "@com_github_3rdparty_stout_borrowed_ptr//:borrowed_ptr",
        "@com_github_3rdparty_stout_notification//:notification",
        "@com_github_google_glog//:glog",
        "@com_github_grpc_grpc//:grpc++",
        "@com_google_absl//absl/base",
        "@com_google_absl//absl/container:flat_hash_map",
    ],
)

name: Build and Run All Tests

# We use action's triggers 'push' and 'pull_request'.
# The strategy is the following: this action will be
# triggered on any push to 'main' branch and any pull
# request to any branch. Thus we avoid duplicate work-
# flows.
on:
  push:
    branches:
      - "main"
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            sudo-command: "sudo"
            # Explicitly not using `dazel` here as we don't want to
            # build/test on Linux but on macOS!
            bazel-command: "bazelisk"
            bazel-config: ""
          - os: ubuntu-latest
            sudo-command: "sudo"
            bazel-command: "dazel"
            bazel-config: "--config=asan"
          - os: windows-2019
            sudo-command: "" # The Windows runner already runs as root.
            # Explicitly not using `dazel` here as we don't want to
            # build/test on Linux but on Windows!
            bazel-command: "bazelisk"
            bazel-config: ""

    defaults:
      run:
        shell: bash

    env:
      GOOGLE_APPLICATION_CREDENTIALS: service_account_credentials.json
      GOOGLE_REMOTE_CACHE: https://storage.googleapis.com/reboot-dev-eventuals-remote-cache

    steps:
      # Checkout the repository under $GITHUB_WORKSPACE.
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Enable long path
        if: ${{ matrix.os == 'windows-2019' }}
        shell: pwsh
        run: .\long_path.ps1    

      - name: Set up remote cache credentials
        # With the exception of GITHUB_TOKEN, secrets are not passed to the runner
        # when a workflow is triggered from a forked repository.
        if: github.event.pull_request.head.repo.full_name == '3rdparty/eventuals'
        uses: jsdaniell/create-json@1.1.2
        with:
          name: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
          json: ${{ secrets.GCP_GITHUB_INFRA_REMOTE_CACHE_CREDENTIALS }}

      # Install Dazel for use on Linux so that we use the same build
      # tooling in our Actions as we do on our workstations.
      - name: Install Dazel
        if: ${{ matrix.bazel-command == 'dazel' }}
        run: ${{ matrix.sudo-command }} pip3 install dazel

      # Install 'wheel' for Python on Windows as required for running
      # commands like 'python setup.py bdist_wheel'.
      - name: Install Python 'wheel'
        if: ${{ matrix.os == 'windows-2019' }}
        run: ${{ matrix.sudo-command }} pip3 install wheel

      - name: Build
        # With the exception of GITHUB_TOKEN, secrets are not passed to the runner
        # when a workflow is triggered from a forked repository.
        if: github.event.pull_request.head.repo.full_name == '3rdparty/eventuals'
        run: |
          ${{ matrix.bazel-command }} build \
            ${{ matrix.bazel-config }} \
            --spawn_strategy=local \
            -c dbg \
            --strip="never" \
            --remote_cache=$GOOGLE_REMOTE_CACHE \
            --google_credentials=$GOOGLE_APPLICATION_CREDENTIALS \
            --verbose_failures \
            ...

      # With the exception of GITHUB_TOKEN, secrets are not passed to the runner
      # when a workflow is triggered from a forked repository.
      - name: Build forked
        if: github.event.pull_request.head.repo.full_name != '3rdparty/eventuals'
        run: |
          ${{ matrix.bazel-command }} build \
            ${{ matrix.bazel-config }} \
            --spawn_strategy=local \
            -c dbg \
            --strip="never" \
            --verbose_failures \
            ...

      - name: Test
        run: |
          ${{ matrix.bazel-command }} test \
            ${{ matrix.bazel-config }} \
            --experimental_ui_max_stdouterr_bytes=-1 \
            --spawn_strategy=local \
            -c dbg \
            --strip="never" \
            --test_output=errors \
            test/... \
            --test_arg=--gtest_shuffle \
            --test_arg=--gtest_repeat=100

      - name: Debug using tmate (if failure)
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
        
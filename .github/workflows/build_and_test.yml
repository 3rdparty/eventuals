# Workflow for building and testing eventuals on macOS, Ubuntu and Windows.
name: Build and Run all tests

# We use action's triggers 'push' and 'pull_request'.
# The strategy is the following: this action will be
# triggered on any push to 'main' branch and any pull
# request to any branch. Thus we avoid duplicate work-
# flows.
on:
  push:
    branches:
      - "main"
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            sudo-command: "sudo"
            # The macos runner doesn't have `docker` installed, so can't run
            # `dazel`. Fall back to `bazel`.
            bazel-command: "bazel"
            bazel-config: ""
          - os: ubuntu-latest
            sudo-command: "sudo"
            bazel-command: "dazel"
            bazel-config: "--config=asan"
          - os: windows-2019
            sudo-command: "" # The Windows runner already runs as root.
            # Our `dazel` container is based on `ubuntu:latest`, which doesn't
            # support running on the `windows/amd64` platform. Fall back to
            # `bazel`.
            bazel-command: "bazel"
            bazel-config: ""

    env:
      BAZEL_CONFIG: ${{ matrix.bazel-config }}

    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository under $GITHUB_WORKSPACE.
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      # Install Dazel, so that we use the same build tooling in our Actions as
      # we do on our workstations.
      - name: Install Dazel
        run: ${{ matrix.sudo-command }} pip3 install dazel

      - name: Build
        run: |
          ${{ matrix.bazel-command }} build \
            ${BAZEL_CONFIG} \
            --spawn_strategy=local \
            -c dbg \
            --strip="never" \
            :eventuals

      - name: Test
        run: |
          ${{ matrix.bazel-command }} test \
            ${BAZEL_CONFIG} \
            --experimental_ui_max_stdouterr_bytes=-1 \
            --spawn_strategy=local \
            -c dbg \
            --strip="never" \
            --test_output=errors \
            test:eventuals \
            --test_arg=--gtest_shuffle \
            --test_arg=--gtest_repeat=100

      - name: Debug using tmate (if failure)
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3

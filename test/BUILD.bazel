load("@bazel_skylib//rules:build_test.bzl", "build_test")

# NOTE: instead of 'cc_grpc_library' from '@com_github_grpc_grpc'
# could also use 'cpp_grpc_library' from '@rules_proto_grpc'.
load("@com_github_grpc_grpc//bazel:cc_grpc_library.bzl", "cc_grpc_library")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_test")
load("//bazel:cc_eventuals_library.bzl", "cc_eventuals_library")
load("//bazel:copts.bzl", "copts")

proto_library(
    name = "sample_service_proto",
    testonly = True,
    srcs = [":sample_service.proto"],
)

cc_proto_library(
    name = "sample_service_cc_proto",
    testonly = True,
    deps = [":sample_service_proto"],
)

cc_grpc_library(
    name = "sample_service_grpc",
    testonly = True,
    srcs = [":sample_service_proto"],
    grpc_only = True,
    deps = [
        ":sample_service_cc_proto",
        "@com_github_grpc_grpc//:grpc++",
    ],
)

cc_eventuals_library(
    name = "sample_service_eventuals_generated",
    testonly = True,
    deps = [":sample_service_proto"],
)

cc_library(
    name = "sample_service_eventuals",
    testonly = True,
    srcs = ["sample_service_eventuals_generated"],
    deps = [
        ":sample_service_grpc",
        "//:grpc",
    ],
)

# Make sure that generated eventuals-wrapped service code at leasts builds.
# TODO(alexmc, benh): verify correctness as well as compilability.
build_test(
    name = "sample_service_eventuals_build_test",
    targets = [":sample_service_eventuals"],
)

cc_library(
    name = "expect-throw-what",
    hdrs = [
        "expect-throw-what.h",
    ],
    visibility = ["//visibility:public"],
)

# NOTE: we build "concurrent" tests in a separate library to
# significantly speed up linking on platforms which prefer shared
# libraries (e.g., macos).
cc_library(
    name = "concurrent-tests",
    # We've split all of the tests into separate files so they can be
    # compiled in parallel which is significantly faster than having
    # all of the tests in a single file.
    srcs = [
        "concurrent-downstream-done-both-eventuals-success.cc",
        "concurrent-downstream-done-one-eventual-fail.cc",
        "concurrent-downstream-done-one-eventual-stop.cc",
        "concurrent-emit-fail-interrupt.cc",
        "concurrent-emit-interrupt-fail.cc",
        "concurrent-emit-interrupt-stop.cc",
        "concurrent-emit-stop-interrupt.cc",
        "concurrent-fail.cc",
        "concurrent-fail-before-start.cc",
        "concurrent-fail-or-stop.cc",
        "concurrent-flat-map.cc",
        "concurrent-interrupt-fail.cc",
        "concurrent-interrupt-fail-or-stop.cc",
        "concurrent-interrupt-stop.cc",
        "concurrent-interrupt-success.cc",
        "concurrent-moveable.cc",
        "concurrent-stop.cc",
        "concurrent-stop-before-start.cc",
        "concurrent-stream-fail.cc",
        "concurrent-stream-stop.cc",
        "concurrent-success.cc",
    ],
    hdrs = [
        "concurrent.h",
    ],
    copts = copts(),
    deps = [
        ":expect-throw-what",
        "//:eventuals",
        "@com_github_google_googletest//:gtest",
    ],
    # Setting it to False or leaving it absent will prevent concurrent
    # tests from running on Windows.
    alwayslink = True,
)

cc_test(
    name = "eventuals",
    srcs = [
        "callback.cc",
        "catch.cc",
        "closure.cc",
        "collect.cc",
        "conditional.cc",
        "dns-resolver.cc",
        "do-all.cc",
        "event-loop-test.h",
        "eventual.cc",
        "expected.cc",
        "filesystem.cc",
        "filter.cc",
        "finally.cc",
        "flat-map.cc",
        "foreach.cc",
        "generator.cc",
        "http.cc",
        "http-mock-server.h",
        "if.cc",
        "iterate.cc",
        "let.cc",
        "lock.cc",
        "pipe.cc",
        "range.cc",
        "repeat.cc",
        "signal.cc",
        "static-thread-pool.cc",
        "stream.cc",
        "take.cc",
        "task.cc",
        "then.cc",
        "timer.cc",
        "transformer.cc",
        "type-check.cc",
        "type-traits.cc",
        "unpack.cc",
    ],
    copts = copts(),
    deps = [
        ":concurrent-tests",
        ":expect-throw-what",
        "//:eventuals",
        "@com_github_google_googletest//:gtest_main",
    ],
)

cc_binary(
    name = "death-client",
    srcs = [
        "death-client.cc",
    ],
    copts = copts(),
    deps = [
        "//:grpc",
        "@com_github_grpc_grpc//examples/protos:helloworld_cc_grpc",
    ],
)

cc_binary(
    name = "death-server",
    srcs = [
        "death-server.cc",
    ],
    copts = copts(),
    deps = [
        "//:grpc",
        "@com_github_grpc_grpc//examples/protos:helloworld_cc_grpc",
    ],
)

cc_test(
    name = "grpc",
    timeout = "short",
    srcs = [
        "accept.cc",
        "build-and-start.cc",
        "cancelled-by-client.cc",
        "cancelled-by-server.cc",
        "client-death-test.cc",
        "deadline.cc",
        "greeter-server.cc",
        "helloworld.eventuals.cc",
        "helloworld.eventuals.h",
        "main.cc",
        "multiple-hosts.cc",
        "server-death-test.cc",
        "server-unavailable.cc",
        "streaming.cc",
        "test.h",
        "unary.cc",
        "unimplemented.cc",
    ],
    copts = copts(),
    data = [
        ":death-client",
        ":death-server",
    ],
    # NOTE: need to add 'linkstatic = True' in order to get this to
    # link until https://github.com/grpc/grpc/issues/13856 gets
    # resolved.
    linkstatic = True,
    # This test is fairly fast, but our GitHub Action Runner compiles with
    # -c dbg --config=asan (~1s per test) and runs it 100x which often hits
    # the default "short" timeout without sharding.
    shard_count = 5,
    # TODO(benh): resolve build issues on Windows and then remove
    # these 'target_compatible_with' constraints.
    target_compatible_with = select({
        "@platforms//os:linux": [],
        "@platforms//os:macos": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":expect-throw-what",
        "//:grpc",
        "@bazel_tools//tools/cpp/runfiles",
        "@com_github_google_googletest//:gtest",
        "@com_github_grpc_grpc//examples/protos:helloworld_cc_grpc",
        "@com_github_grpc_grpc//examples/protos:keyvaluestore",
    ],
)

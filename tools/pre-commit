#!/bin/bash

# Check for existence of git.
which git >/dev/null
if [[ $? != 0 ]]; then
  printf "Failed to find 'git' (please install or update your path)\n"
  exit 1
fi

# Check for existence of clang-format
which clang-format >/dev/null
if [[ $? != 0 ]]; then
  printf "Failed to find 'clang-format' (please install or update your path)\n"
  exit 1
fi

# Returns 0 if the version in the first argument is greater than or
# equal to the version in the second argument, otherwise returns 1.
check_version() {
  local found="$1"
  local required="$2"

  # Use 'sort -V' in order to sort the versions and select the "oldest".
  local oldest="$(printf '%s\n' "${found}" "${required}" | sort -V | head -n1)"

  # Ensure the "oldest" of the two versions is what's required.
  [[ "${oldest}" == "${required}" ]]
}

# IMPORTANT NOTE.
# The command `clang-format --version` behaves differently on different OS.
# For example, on Ubuntu this command will message us out with the following
# content:
#   Ubuntu clang-format version 12.0.0-3ubuntu1~20.04.4
# On macos: 
#   clang-format version 13.0.0
# That's why commands like `cut`, `head`, `tr` are not the way we wanna grab
# the version's numbers. 

# Store in `clang_format_version_output` clang-format --version output.
clang_format_version_output="$(clang-format --version)"

# Retain the part after the `version ` (including space too).
clang_format_version_found=${clang_format_version_output##*version }

# Retain the part before `-`.
clang_format_version_found=${clang_format_version_found%-*}
clang_format_version_required="12.0.0"

check_version ${clang_format_version_found} ${clang_format_version_required}

if [[ $? != 0 ]]; then
  printf "clang-format version '%s' is required but found '%s'\n" \
    "${clang_format_version_required}" \
    "${clang_format_version_found}"
  exit 1
fi

# Get top-level directory so we can look for .clang-format file.
directory=$(git rev-parse --show-toplevel)

# Check for .clang-format file.
if [[ ! -f "${directory}/.clang-format" ]]; then
  printf "Failed to find '.clang-format' file at '%s'\n" "${directory}"
  exit 1
fi

run_checks() {
  local -i status=0
  files=`git diff --cached --name-only --diff-filter=ACM HEAD | grep -iE '\.(cc|h)$'`
  for file in ${files}; do
    # Check file is formatted correctly.
    clang-format --dry-run -Werror --ferror-limit=0  ${file}
    if [[ $? != 0 ]]; then
      status=1
    fi

    # Ensure file doesn't have lines exceeding 80 characters. Note
    # that we do this check here versus using clang-format because we
    # clang-format to respect programmer added newlines in places
    # where it makes the code easier to read than what clang-format
    # might have done itself.
    local -i number=1
    while IFS= read -r line; do
      local -i length=${#line}
      if (( length > 80 )); then
        status=1
        tput bold
        printf "%s:%i:%i: " "${file}" "${number}" "${length}"
        tput setaf 1 # Red
        printf "error: "
        tput sgr0 # Reset terminal.
        tput bold
        printf "line exceeds 80 characters\n"
        tput sgr0 # Reset terminal.
        printf "%s\n" "${line}"
      fi
      (( number++ ))
    done < "${file}"

    # TODO: add more pre-commit checks here ...
  done
  exit ${status}
}

case "$1" in
  --help )
    echo "Performs checks on files to be committed"
    ;;
  * )
    run_checks
    ;;
esac
